version: '3.7'

networks:
  publicWeb:
  jitsiMeet:
  cabotInternal:

volumes:
  bitwardenData:
  bitwardenBackups:
  tlsCertificates:
  dnsZones:
  dnsConfig:
  subscriberData:
  dashData:
  jitsiWebConfig:
  jitsiProsodyConfig:
  jitsiJicofoConfig:
  jitsiVideoBridgeConfig:
  cabotDBData:

services:
  Web:
    image: caddy/caddy:alpine
    restart: unless-stopped
    command: ['caddy', 'run', '--config', '/etc/caddy/Caddyfile.json']
    volumes:
      - ./Caddyfile.json:/etc/caddy/Caddyfile.json
      - tlsCertificates:/TLS:ro
    ports:
      - 80:80
      - 443:443/tcp
      - 443:443/udp
    networks:
      - publicWeb
    labels:
      com.ouroboros.enable: 'true'
      com.distributed-dns.web: 'true'

  jitsiWeb:
    image: jitsi/web
    restart: unless-stopped
    env_file: ENVs/Jitsi.env
    volumes:
      - jitsiWebConfig:/config
    networks:
      jitsiMeet:
        aliases:
          - meet.jitsi
      publicWeb:
    environment:
      ENABLE_AUTH: '0'
      ENABLE_GUESTS: '1'
      ENABLE_LETSENCRYPT: '0'
      ENABLE_HTTP_REDIRECT: '0'
      ENABLE_TRANSCRIPTIONS: '0'
      DISABLE_HTTPS: '1'
      JICOFO_AUTH_USER: 'focus'

    # XMPP server
  jitsiProsody:
    image: jitsi/prosody
    restart: unless-stopped
    env_file: ENVs/Jitsi.env
    expose:
      - '5222'
      - '5347'
      - '5280'
    volumes:
      - jitsiProsodyConfig:/config
    networks:
      jitsiMeet:
        aliases:
          - xmpp.meet.jitsi

  jitsiJicofo:
    image: jitsi/jicofo
    restart: unless-stopped
    env_file: ENVs/Jitsi.env
    volumes:
      - jitsiJicofoConfig:/config
    networks:
      jitsiMeet:
        aliases:
          - jicofo
    depends_on:
      - jitsiProsody

  jitsiJVB:
    image: jitsi/jvb
    restart: unless-stopped
    env_file: ENVs/Jitsi.env
    volumes:
      - jitsiVideoBridgeConfig:/config
    networks:
      jitsiMeet:
        aliases:
          - jvb
    ports:
      - 10000:10000/udp
      - 4443:4443
    depends_on:
      - jitsiProsody

  # Script that checks for updates to docker containers and recreates an identical container with new image if there is an update.
  #
  # I currently have it setup to only update containers with the docker tag of `com.ouroboros.enable: 'true'`
  #
  # Repo: https://github.com/pyouroboros/ouroboros
  Ouroboros:
    image: pyouroboros/ouroboros
    restart: unless-stopped
    container_name: ouroboros
    hostname: ouroboros
    env_file: ENVs/Ouroboros.env
    environment:
      CLEANUP: 'true'
      LOG_LEVEL: 'error'
      SELF_UPDATE: 'true'
      LABEL_ENABLE: 'true'
      LABELS_ONLY: 'true'
      TZ: 'America/Winnipeg'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/.docker/config.json:/root/.docker/config.json:ro

  # pfCarper used to automatically assign a DigitalOcean Floating IP to tagged droplets when the active droplet stops responding
  # at a port, default `443`
  #
  # Repo: https://github.com/K-FOSS/pfCarper
  pfCarper:
    image: docker.pkg.github.com/k-foss/pfcarper/pfcarper
    restart: unless-stopped
    env_file: ENVs/pfCarper.env
    labels:
      com.ouroboros.enable: 'true'

  speedtest-kjdev:
    image: adolfintel/speedtest
    restart: unless-stopped
    networks:
      - publicWeb
    environment:
      MODE: 'standalone'
      TELEMETRY: 'true'
      ENABLE_ID_OBFUSCATION: 'true'
    labels:
      com.ouroboros.enable: 'true'

  # Dashboard for easy access to all of my services and resources
  dash-kjdev:
    image: rmountjoy/dashmachine
    restart: unless-stopped
    volumes:
      - dashData:/dashmachine/dashmachine/user_data
    networks:
      - publicWeb

  # BIND9 Server for serving the Zones from Distributed DNS. Zones are fetched and container is controlled by the DNSDL Service
  ns1-kjdev:
    image: resystit/bind9:latest
    restart: unless-stopped
    depends_on:
      - SubscriberDL
    volumes:
      - dnsZones:/zones:ro
      - dnsConfig:/etc/bind:ro
    ports:
      - 53:53/udp
    labels:
      com.distributed-dns.bind: 'true'
      com.ouroboros.enable: 'true'

  SubscriberDL:
    image: docker.pkg.github.com/kristianfjones/distributed-dns/distributed-dns-subscriberdl
    restart: unless-stopped
    env_file: ENVs/SubscriberDL.env
    extra_hosts:
      - 'dns.kristianjones.dev:35.188.2.39'
    environment:
      API_URL: 'https://dns.kristianjones.dev'
    volumes:
      - subscriberData:/data/State
      - dnsZones:/data/Zones
      - tlsCertificates:/data/TLS
      - dnsConfig:/data/BIND
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      com.ouroboros.enable: 'true'

  bitwarden-kjdev:
    image: bitwardenrs/server:alpine
    restart: unless-stopped
    env_file: ./ENVs/Bitwarden.env
    volumes:
      - bitwardenData:/data
    networks:
      - publicWeb
    environment:
      WEBSOCKET_ENABLED: 'true' # Required to use websockets
      SIGNUPS_ALLOWED: 'true' # set to false to disable signups
      LOG_LEVEL: 'off'
    labels:
      com.ouroboros.enable: 'true'

  bitwarden-kjdev-backup:
    image: bruceforce/bw_backup
    restart: on-failure
    init: true
    depends_on:
      - bitwarden-kjdev
    volumes:
      - bitwardenData:/data:ro
      - bitwardenBackups:/backups
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      DB_FILE: '/data/db.sqlite3'
      BACKUP_FILE: '/backups/backup.sqlite3'
      CRON_TIME: '0 * * * *'
      TIMESTAMP: 'true'
      UID: '0'
      GID: '0'

  # Cabot Monitoring and Alerting
  cabotWeb:
    image: cabotapp/cabot
    restart: unless-stopped
    command: sh -c "cabot migrate && gunicorn cabot.wsgi:application -b 0.0.0.0:5000 --workers=5"
    env_file: ENVs/Cabot.env
    depends_on:
      - cabotDB
      - cabotRabbitMQ
    networks:
      - cabotInternal
      - publicWeb
    labels:
      com.ouroboros.enable: 'true'

  catbotWorker:
    image: cabotapp/cabot
    restart: unless-stopped
    command: celery worker -A cabot
    env_file: ENVs/Cabot.env
    networks:
      - cabotInternal
    depends_on:
      - cabotWeb
      - cabotDB
      - cabotRabbitMQ
    labels:
      com.ouroboros.enable: 'true'

  catbotBeat:
    image: cabotapp/cabot
    restart: unless-stopped
    command: celery beat -A cabot
    env_file: ENVs/Cabot.env
    networks:
      - cabotInternal
    depends_on:
      - cabotWeb
      - cabotDB
      - cabotRabbitMQ
    labels:
      com.ouroboros.enable: 'true'

  cabotDB:
    image: postgres:9.6-alpine
    restart: unless-stopped
    environment:
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    volumes:
      - cabotDBData:/var/lib/postgresql/data
    networks:
      - cabotInternal
    labels:
      com.ouroboros.enable: 'true'

  cabotRabbitMQ:
    image: rabbitmq:3.6-alpine
    restart: unless-stopped
    networks:
      - cabotInternal
    labels:
      com.ouroboros.enable: 'true'
