version: '3.7'

networks:
  publicWeb:
  netboxDatabase:
  netboxRedis:

volumes:
  tlsCertificates:
  subscriberData:
  netboxStatic:
  netboxMedia:
  netboxRedisData:
  netboxDatabaseData:

x-netboxBase: &netboxBase
  image: netboxcommunity/netbox:develop-2.8
  restart: unless-stopped
  environment:
    CORS_ORIGIN_ALLOW_ALL: 'true'
    DB_NAME: netbox
    DB_USER: netbox
    DB_HOST: netboxdatabase
    REDIS_HOST: netboxredis
    REDIS_SSL: 'false'
    REDIS_DATABASE: 0
    REDIS_CACHE_HOST: netboxRedisCache
    REDIS_CACHE_DATABASE: 0
    REDIS_CACHE_SSL: 'false'

services:
  Web:
    image: caddy/caddy:scratch
    restart: unless-stopped
    command: ['caddy', 'run', '--config', '/etc/Caddy/Caddyfile.json']
    volumes:
      - ./Caddyfile.json:/etc/Caddy/Caddyfile.json:ro
      - type: volume
        source: netboxStatic
        target: /var/www/netbox/static
        read_only: true
        volume:
          nocopy: true
    networks:
      - publicWeb
    ports:
      - 80:8080
      - 443:8443/tcp
      - 443:8443/udp
    depends_on:
      - SubscriberDL
    labels:
      com.ouroboros.enable: 'true'

  # Repo: https://github.com/pyouroboros/ouroboros
  Ouroboros:
    image: pyouroboros/ouroboros
    restart: unless-stopped
    container_name: ouroboros
    hostname: ouroboros
    env_file: ENVs/Ouroboros.env
    environment:
      CLEANUP: 'true'
      LOG_LEVEL: 'error'
      SELF_UPDATE: 'true'
      LABEL_ENABLE: 'true'
      LABELS_ONLY: 'true'
      TZ: 'America/Winnipeg'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/.docker/config.json:/root/.docker/config.json:ro

  netboxApp:
    <<: *netboxBase
    env_file: ENVs/Netbox.env
    networks:
      - publicWeb
      - netboxDatabase
      - netboxRedis
    volumes:
      - type: volume
        source: netboxStatic
        target: /opt/netbox/netbox/static
        volume:
          nocopy: false
      - netboxMedia:/opt/netbox/netbox/media
    depends_on:
      - netboxDatabase
      - netboxRedis
      - netboxWorker

  netboxWorker:
    <<: *netboxBase
    entrypoint: ['python3', '/opt/netbox/netbox/manage.py']
    command: ['rqworker']
    env_file: ENVs/Netbox.env
    networks:
      - netboxDatabase
      - netboxRedis
    depends_on:
      - netboxDatabase
      - netboxRedis

  netboxDatabase:
    image: postgres:11-alpine
    restart: unless-stopped
    env_file: ENVs/Database.env
    environment:
      POSTGRES_USER: netbox
      POSTGRES_DB: netbox
    volumes:
      - netboxDatabaseData:/var/lib/postgresql/data
    networks:
      - netboxDatabase

  netboxRedis:
    image: redis:5-alpine
    restart: unless-stopped
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: ENVs/Redis.env
    volumes:
      - netboxRedisData:/data
    networks:
      - netboxRedis

  netboxRedisCache:
    image: redis:5-alpine
    restart: unless-stopped
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: ENVs/Redis.env
    networks:
      - netboxRedis
